Get Started
-----------

Simple CMake without modules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. role:: bash(code)
   :language: bash

Setup:

1. Create a project

   .. code-block:: bash

      mkdir demo/
      cd demo/

2. Create C++ project tree

   .. code-block:: bash

      mkdir -p include/demo/
      mkdir -p src/

3. Create header and source files

   .. code-block:: bash

      cat <<EOF > include/demo/demo.hpp
      #pragma once
      #include <string>
      std::string fn_demo();
      EOF

   .. code-block:: bash

      cat <<EOF > src/demo.cpp
      #include <demo/demo.hpp>
      std::string fn_demo() {
        return "I'm demo!";
      }
      EOF

   .. code-block:: bash

      cat <<EOF > src/main.cpp
      #include <demo/demo.hpp>
      #include <iostream>

      int main() {
        std::cout << fn_demo() << '\n';
        return 0;
      }
      EOF

.. code-block:: cmake
   :caption: Simple CMake without modules
   :name: simple
   :linenos:

   cmake_minimum_required(VERSION 3.0)
   project(demo VERSION 1.0.0)

   # Add reason to CMAKE_MODULE_PATH
   include(reason)

   set(PROJECT_SRCS "src/the_main1.cpp" "src/the_main2.cpp")

   reason_add_library(STATIC SHARED TARGET "demo" INC_DIRS "include" SRCS "${PROJECT_SRCS}" LINKS "pthread")
   reason_add_executable(TARGET "demo" SRCS "src/main.cpp" LINKS "demo_s")
   reason_install(TARGETS "demo" "demo_s" "demo_d" INC_DIRS "include")

   # Enable testing for testing submodules
   reason_add_multiple_tests(TEST_NAME "test_demo" SRCS "test/test1.cpp" "test/test2.cpp" LINKS "demo_s")
   enable_testing()

   set(CPACK_GENERATOR "STGZ;TGZ;TZ")
   reason_pack_deb(CONTACT  "My Name Here <mail@example.com>" ARCH "amd64" DEBDEP "libc6 (>= 2.4)" SECTION  "devel" PRIORITY "optional")
   include(CPack)
